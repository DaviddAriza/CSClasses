0. extract_words.py

This script, extract_words.py, is designed to process a text file from a novel and produce three output files containing all words, unique words, and word frequency data. The purpose of the script is to analyze the content of the novel by extracting all words, identifying unique words, and creating a word frequency distribution.

To run this script, you will need the following:

Python 3.x installed on your system.
A .txt file of the novel you wish to analyze.

How It Works:
extract_words_from_file(filename): This function reads the entire content of a novel file, converts all text to lowercase, and uses regular expressions (regex) to extract only alphabetic words. The result is a list of words (including duplicates).
write_allwords(words, output_file): This function writes all extracted words (including duplicates) to a file named allwords.txt. Each word is placed on a new line.
write_uniquewords(words, output_file): This function identifies words that occur only once in the text, using a defaultdict to count occurrences. These unique words are written to uniquewords.txt, one word per line.
write_wordfrequency(words, output_file): This function generates a frequency distribution of words by counting how often each word appears in the text and recording how many words share the same frequency. The data is written to wordfrequency.txt in the format frequency: number of words.

Step-by-Step Instructions:

Select a novel from Project Gutenberg.
Download the novel as a .txt file.
Ensure that the .txt file is placed in the same directory as the script.
Install Python 3.x.
Open a terminal or command prompt.
Navigate to the directory where extract_words.py and your novel file are located.
Replace novel.txt in the script with the name of your downloaded .txt file.
Run the following command in your terminal: python extract_words.py

Output Files: Upon successful execution, the script will generate the following output files:

allwords.txt: Contains all words from the novel in lowercase, without punctuation or duplicates.
uniquewords.txt: Contains only words that appear once in the novel.
wordfrequency.txt: Contains the frequency distribution of the words in the format frequency: number of words.



1. a3_novelvisualization.pde

This file selects random words from the uniquewords.txt, which is generated by the write_uniquewords function in the extract_words.py file, and displays them in different colors.

How it works
In the setup function, words from the uniquewords.txt file are read and stored in a string array called words. A color array named word_color is populated with 10 color objects, ranging from green to blue, and will be used later in the draw function. The update_random_words function is also called here.
The update_random_words function takes the words array and returns a random selection of words stored in an ArrayList called random_words. Each time the for loop runs, a random word from the words list is selected using the Random function and added to the random_words list. The function returns this ArrayList at the end.
The update_random_words function is called each time the user presses the mouse, updating the random_words ArrayList.
In the draw function, each word is displayed on the screen. The color of each word is chosen from the word_color array based on its length, creating a gradual shift in color as the length of the words increases. Two variables, x and y, track the positions of the words to ensure they remain within the screen boundaries. The words stop displaying when the bottom right corner of the screen is reached.
Step-by-Step Instructions:
Open the a3_novelvisualization.pde file located in the a3_novelvisualization folder, and click "Run." A display of random words will appear on the screen.
Click the screen with the mouse to refresh and change the words.




2. a3_wordfrequency.pde

This file reads all the lines in the text file wordfrequency.txt and generates a pie chart and legend depicting the frequency of the words in the text and the number of words with that frequency. 

How it works
At the top of the pde file several arrays and a variable store the various data in the wordfrequency.txt file such as the frequencies, the number of words with that frequency, the total words, and the angles generated by the frequencies.
The setup function initiates the background size, reads the lines in the wordfrequency.txt file, sets the window to be resizable, loops once through each line splits the line, converts the two strings to integers, stores them in the corresponding array for frequencies and words, and counts the total words in the txt file. Then it loops a second time to calculate the angles of the frequencies and stores them in the angles array.
The draw function has several features but is mainly responsible for rendering the pie chart and legend onto the screen. First, it sets the background to white and then it sets up variables to track the current angle and calculate the position and size of the pie chart based on the window’s dimensions. The pie chart’s diameter is dynamically calculated as 75% of the smaller dimension of the window. The arc function is used to draw each slice proportional to the number of words with that frequency and uses the calculated angles in the angles array to draw the correct size of each slice.
The draw function is also responsible for the legend which helps display what frequency matches to what color. To keep the legend from going out of the screen, an itemsPerColumn variable is used to calculate the number of legends that can be put on the screen vertically before a new column is generated. The rect function is used to draw the colored boxes and the text function is used to display the corresponding word frequency with the each word count next to each box.

Step-by-Step Instructions:

Open the a3_wordfrequency.pde file in the a3_wordfrequency folder.
Click “Run” and a pie chart and legend with all the color-coded frequencies will appear on the screen.

Documentation:

The assignment was split into three parts for the three group members. One person was assigned to create the extract_words.py along with the word cloud, one other person was assigned to create the a3_novelvisulization.pde, and the last person was assigned to create the a3_wordfrequency.pde.
